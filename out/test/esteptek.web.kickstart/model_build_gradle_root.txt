// ${companyName}.${productName}.model

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: "checkstyle"
    apply plugin: "findbugs"
    apply plugin: 'pmd'
    apply plugin: 'jacoco'

    group = "${companyName}.${productName}"
    version = "SNAPSHOT-1.0"

    sourceCompatibility = ${javaVersion}
    targetCompatibility = ${javaVersion}

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        compile 'org.springframework:spring-orm:4.3.7.RELEASE'

        compile 'org.apache.commons:commons-lang3:3.5'
        compile 'commons-io:commons-io:2.5'
        compile 'commons-collections:commons-collections:3.2.2'

        compile 'org.springframework:spring-context:4.3.7.RELEASE'
        compile 'org.springframework:spring-context-support:4.3.7.RELEASE'
        compile 'org.springframework:spring-tx:4.3.7.RELEASE'
        compile 'org.springframework.security:spring-security-core:4.2.2.RELEASE'

        compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.7'

        compile 'org.aspectj:aspectjweaver:1.8.10'
        compile 'javax.mail:mail:1.4.7'
        compile 'log4j:log4j:1.2.17'
        compile 'org.jasypt:jasypt:1.9.2'
        compile 'com.google.code.gson:gson:2.8.0'

        compile 'org.eclipse.persistence:eclipselink:2.6.4'
        compile 'org.eclipse.persistence:org.eclipse.persistence.jpa:2.6.4'

        compile 'com.google.code.findbugs:annotations:3.0.1'

        testCompile 'junit:junit:4.12'
        testCompile 'org.jmockit:jmockit:1.13'
        testCompile 'org.springframework:spring-test:4.3.7.RELEASE'
    }

    checkstyle {
        sourceSets = [project.sourceSets.main]
        ignoreFailures = true
        configFile = rootProject.file('config/checkstyle/proj-checkstyle.xml')
        reportsDir = file("\$project.buildDir/reports/checkstyle")
        showViolations = true
    }

    pmd {
        ignoreFailures = true
        sourceSets = [sourceSets.main]
        reportsDir = file("\$project.buildDir/reports/pmd")
        ruleSetFiles = files("../../config/rulesets/proj-pmd-rules.xml")
    }

    findbugs {
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        reportsDir = file("\$project.buildDir/reports/findbugs")
        effort = "max"
        reportLevel = "low"
    }

    jacoco {
        reportsDir = file("\$project.buildDir/reports/coverage")
    }

    jacocoTestReport {
        group = "Reporting"
        reports {
            xml.enabled false
            csv.enabled true
            html.destination "\$project.buildDir/reports/coverage"
        }
        // exclude these entries from the classpath to not report on them
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['com/${companyName}/${productName}/model/data/**',
                                            'com/${companyName}/${productName}/model/aspect/*ServiceAroundAdvice**',
                                            'com/${companyName}/${productName}/model/criteria/**',
                                            'com/${companyName}/${productName}/model/enumeration/**',
                                            'com/${companyName}/${productName}/model/log/*LogFactory**',
                                            'com/${companyName}/${productName}/model/*ConfigConstant**',
                                            'com/${companyName}/${productName}/model/*RoleConstant**',
                                            'com/${companyName}/${productName}/model/*TomcatJndiTemplate**',
                                            'com/${companyName}/${productName}/model/repository/*ResultSetManager**',
                                            'com/${companyName}/${productName}/model/repository/*DataSet**',
                                            'com/${companyName}/${productName}/model/repository/*CruRepositoryImpl**',
                                            'com/${companyName}/${productName}/model/repository/*RepositoryHelper**',
                                            'com/${companyName}/${productName}/model/repository/*CrudRepositoryImpl**',
                                            'com/${companyName}/${productName}/model/repository/mail/**'
                ])
            })
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    jar.dependsOn sourcesJar

    jar {
        manifest.attributes provider: '${companyNameLong}'
    }
}
