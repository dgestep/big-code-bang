import {Component, OnInit, OnDestroy} from "@angular/core";
import {Router} from "@angular/router";
import {TabManagerService} from "./tab.manager.service";
import {Subscription} from "rxjs";
import {TabLink} from "./tab.link.data";
import {UserService} from "../shared/user.service";
import {UserProfileService} from "../user-profile/user.profile.service";

@Component({
    selector : "tab-manager",
    templateUrl : 'app/tabs/tab.manager.component.html'
})

export class TabManagerComponent implements OnInit, OnDestroy {
    private loggedIn : boolean;
    tabList : Array<TabLink>;
    tabListSubscription : Subscription;
    activeTabSubscription : Subscription;
    loggedInSubscription : Subscription;
    activeTab : number;

    constructor(private router : Router, private tabService : TabManagerService, private userService : UserService) {}

    ngOnInit() {
        this.tabListSubscription = this.tabService.tabListChange.subscribe((list) => this.tabList = list);
        this.activeTabSubscription = this.tabService.activeTabChange.subscribe((index) => this.navigate(index));
        this.loggedInSubscription = this.userService.loggedInMonitor.subscribe((status) => this.loggedIn = status);
        this.tabService.addTab("Landing Page", "hsm-welcome");
        this.activeTab = 0;
    }

    ngOnDestroy() {
        this.tabListSubscription.unsubscribe();
        this.loggedInSubscription.unsubscribe();
        this.activeTabSubscription.unsubscribe();
    }

    navigate(idx : number) {
        if (idx < this.tabList.length && this.tabList.length > 0) {
            this.tabService.setActiveTabIndex(idx);
            this.activeTab = idx;
            if (this.tabList[idx].navIdx) {
                this.router.navigate([this.tabList[idx].route, this.tabList[idx].navIdx]);
            }
            else {
                this.router.navigate([this.tabList[idx].route]);
            }

        }
        else {
            this.router.navigate(['']);
        }
    }

    closeTab(idx : number) {
        if (this.tabList.length - 1 != idx && this.activeTab != idx) {
            this.tabService.deleteTabNoFocusChange(idx);
        }
        else {
            this.tabService.deleteTab(idx);
        }
    }
}