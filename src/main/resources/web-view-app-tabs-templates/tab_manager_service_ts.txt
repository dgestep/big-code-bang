import {Injectable} from "@angular/core";
import {TabLink} from "./tab.link.data";
import {Subject} from 'rxjs/Subject';

@Injectable()
export class TabManagerService {
    private tabList : Array<TabLink> = new Array<TabLink>();
    private activeIndex : number;

    tabListChange : Subject<Array<TabLink>> = new Subject<Array<TabLink>>();
    activeTabChange : Subject<number> = new Subject<number>();

    tabChange() {
        this.tabListChange.next(this.tabList);
        this.activeTabChange.next(this.activeIndex)
    }

    tabChangeNoFocusChange() {
        this.tabListChange.next(this.tabList);
    }


    addTab(tabName : String, tabRoute : String, navIdx ?: String) : number {
        let tab : TabLink = new TabLink();
        tab.route = tabRoute;
        tab.title = tabName;

        if (navIdx) {
            tab.navIdx = navIdx;
        }

        // Don't allow duplicate tabs
        let tabIndex = this.tabList.findIndex(tb => tab.title === tb.title);
        if (tabIndex === -1) {
            this.tabList.push(tab);
            tabIndex = this.tabList.length - 1;
        }
        this.activeIndex = tabIndex;
        this.tabChange();

        return tabIndex;
    }

    deleteTab(index : number) {
        this.activeIndex = index;
        if (index > -1) {
            this.tabList.splice(index, 1);
            if (this.activeIndex >= this.tabList.length - 1 && this.activeIndex != 0) {
                this.activeIndex -= 1;
            }
            this.tabChange();
        }
    }

    deleteTabNoFocusChange(index : number) {
        if (index > -1) {
            this.tabList.splice(index, 1);
            this.tabChangeNoFocusChange();
        }
    }

    getRoute(index : number) : String {
        if (index <= this.tabList.length) {
            return this.tabList[index].route;
        }
    }

    getTabIndex(tabName : String, tabRoute : String) : number {
        let tab : TabLink = new TabLink();
        tab.route = tabRoute;
        tab.title = tabName;

        return this.tabList.findIndex(tb => tab.title === tb.title);
    }

    getExists(tabName : String, tabRoute : String) {
        return this.getTabIndex(tabName, tabRoute) === -1;
    }

    clearAllTabs() {
        this.tabList.splice(0,this.tabList.length);
        this.activeIndex = -1;
        this.tabChange();
    }

    setActiveTabIndex(active : number) {
        this.activeIndex = active;
    }

    getActiveTabIndex() : number {
        return this.activeIndex;
    }


}