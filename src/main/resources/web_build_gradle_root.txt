import java.text.SimpleDateFormat

plugins {
	id "com.moowork.gulp" version "0.13"
	id "com.moowork.node" version "0.13"
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: "checkstyle"
apply plugin: "findbugs"
apply plugin: 'pmd'

project.sourceCompatibility = 1.8
project.version = "SNAPSHOT-1.0.0"
project.webAppDirName = 'WebContent'

def webInfPath = project.webAppDirName + "/WEB-INF"

repositories {
	mavenLocal()
	mavenCentral()
}

task versionTxt() << {
      def file = file(new File("\$projectDir/\$project.webAppDirName/version.txt"))
      file.text = "||||project.version}-||||new java.text.SimpleDateFormat("yyyy-MM-dd:HH:mm:ss").format(new Date())}"
}

task copyVersionTxt(dependsOn: [versionTxt]) << {
  copy {
    from ("\$projectDir/\$project.webAppDirName") {
        include 'version.txt'
    }
    into "\$projectDir/build/libs";
  }
}

eclipse {
	wtp {
		facet {
			facet name: 'java', version: '1.8'
		}
	}
}

dependencies {
	providedCompile 'javax.servlet:javax.servlet-api:3.0.1'

	compile project(':hypersonic.database.model:hypersonic.database.model.shared')
	compile project(':hypersonic.database.model:hypersonic.database.model.applogic')
	compile project(':hypersonic.database.model:hypersonic.database.model.data')

	compile 'org.springframework:spring-web:4.3.7.RELEASE'
	compile 'org.springframework:spring-context:4.3.7.RELEASE'
	compile 'org.springframework:spring-context-support:4.3.7.RELEASE'

	compile 'org.springframework.security:spring-security-web:4.2.2.RELEASE'
	compile 'org.springframework.security:spring-security-config:4.2.2.RELEASE'

	compile 'commons-fileupload:commons-fileupload:1.3.2'
	compile 'commons-io:commons-io:2.5'

	compile 'log4j:log4j:1.2.17'

	testCompile 'junit:junit:4.12'
	testCompile 'org.jmockit:jmockit:1.13'

	runtime 'com.fasterxml.jackson.core:jackson-core:2.8.7'
	runtime 'com.fasterxml.jackson.core:jackson-databind:2.8.7'
	runtime 'org.springframework.ws:spring-ws-core:2.4.0.RELEASE'
	runtime 'org.springframework:spring-webmvc:4.3.7.RELEASE'
}

checkstyle {
	sourceSets = [project.sourceSets.main]
	ignoreFailures = false
	configFile = rootProject.file('config/checkstyle/proj-checkstyle.xml')
	reportsDir = file("\$project.buildDir/reports/checkstyle")
	showViolations = true
}

pmd {
	ignoreFailures = false
	sourceSets = [sourceSets.main]
	reportsDir = file("\$project.buildDir/reports/pmd")
	ruleSetFiles = files("../config/rulesets/proj-pmd-rules.xml")
}

findbugs {
	sourceSets = [sourceSets.main]
	ignoreFailures = false
	reportsDir = file("\$project.buildDir/reports/findbugs")
	effort = "max"
	reportLevel = "high"
}

gulp_default.dependsOn 'npmInstall'
gulp_default.dependsOn 'installGulp'

processResources.dependsOn gulp_default

gulp_build.dependsOn 'installGulp'
gulp_build.dependsOn 'npmInstall'

war.dependsOn copyVersionTxt
build.dependsOn gulp_build

gulp {
	workDir = file("||||project.webAppDirName}/node_modules")
	colors = true
	bufferOutput = false
}

node {
	version = '6.7.0'
	npmVersion = '3.10.9'
	nodeModulesDir = file("||||project.webAppDirName}")
	download = true
}

war {
	archiveName 'hsm.war'
	webInf {
		from webInfPath
	}
	rootSpec.exclude ("**/karma*.*")
	rootSpec.exclude ("**/*.ts")
	rootSpec.exclude ("**/ojdbc7.jar")
    rootSpec.exclude ("**/spec/**")
    rootSpec.exclude ("**/jasmine/**")
    rootSpec.exclude ("**/karma/**")
    rootSpec.exclude ("**/npm/**")
    rootSpec.exclude ("**/typescript/**")
	classpath fileTree(webInfPath + "/" + "lib")
	duplicatesStrategy org.gradle.api.file.DuplicatesStrategy.EXCLUDE
}