import {OnInit, Component, Input, Output, EventEmitter, OnDestroy} from "@angular/core";
import {PagerService} from "./pager.service";
import {PagerCommunicationService} from "./pager.communication.service";
import {Subscription} from "rxjs";
import {PagerData} from "./pager.data";

@Component({
    selector: 'pager',
    templateUrl: 'pager.component.html',
    providers: [PagerService]
})
export class PagerComponent implements OnInit, OnDestroy {
    resetPagerSubscription: Subscription;

    @Input()
    name: string;

    // array of all items to be paged
    @Input()
    allItems: Array<any>;

    @Input()
    pageSize: number;

    // pagerComponent object
    pager: any = {};

    pagedItems: any[];

    constructor(private pagerService: PagerService, private pagerCommunicationService: PagerCommunicationService) {
    }

    ngOnInit() {
        /**
         * Called by the pager communication service to reset this pager to the supplied pager data.
         */
        this.resetPagerSubscription = this.pagerCommunicationService.resetPagerObservable.subscribe(item => {
            let name = item.pagerName;

            if (name == this.name) {
                this.allItems = item.data;

                let pager = this.pagerService.getPager(this.allItems.length, item.pageNumber, item.pageSize);
                if (pager.totalPages < item.pageNumber) {
                    this.setPage(pager.totalPages);
                } else {
                    this.setPage(item.pageNumber);
                }
            }
        });

        this.setPage(1);
    }

    ngOnDestroy(): void {
        this.resetPagerSubscription.unsubscribe();
    }

    public setPage(page: number) {
        if (page < 1 || page > this.pager.totalPages) {
            return;
        }

        // holds the page data to send in the page set event
        let pagerData = null;
        if (this.allItems.length == 0) {
            pagerData = new PagerData(this.name, [], 1, this.pageSize);
        } else {
            // sets the latest pager object from service
            this.pager = this.pagerService.getPager(this.allItems.length, page, this.pageSize);

            // set current page of data and set the event data
            this.pagedItems = this.pagerService.getCurrentPageData(this.allItems, page, this.pageSize);
            pagerData = new PagerData(this.name, this.pagedItems, page, this.pageSize);
        }
        // fire the event
        this.pagerCommunicationService.firePageSetEvent(pagerData);
    }
}