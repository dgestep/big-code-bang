import {Component, OnInit} from "@angular/core";
import {FormGroup, FormBuilder} from "@angular/forms";
import {UserService} from "../shared/user.service";
import {SessionHelper} from "../shared/session.helper";
import { AddUserData } from "../shared/user.add.data";
import { ResponseMessageHelper } from "../shared/response.message.helper";
import { ResponseMessage } from "../shared/response.message";
import { ALERT_DANGER, ALERT_SUCC } from "../shared/constants";
import {TabManagerService} from "../tabs/tab.manager.service";

@Component({
    selector: 'user-add',
    templateUrl: 'app/user-profile/user.add.component.html'
})
export class UserAddComponent implements OnInit {
    addForm : FormGroup;

    constructor(private userService : UserService, private msgHelper : ResponseMessageHelper,
                private sessionHelper: SessionHelper, private formBuilder: FormBuilder,
                private tabService : TabManagerService){
        this.msgHelper.clearMessages();
    }

    ngOnInit() {
        this.addForm = this.formBuilder.group({
            firstName : [''],
            lastName  : [''],
            emailAddress : [''],
            role : ['']
        });
    }

    private addUser(newUser : AddUserData) {
        let messages: Array<ResponseMessage> = [];
        this.msgHelper.clearMessages();

        //Check that user role is valid, since server returned error is generic if user role is not valid.
        if (newUser.role === "") {
            messages.push(new ResponseMessage("A value is required for user role", ALERT_DANGER));
            this.msgHelper.setMessages(messages);
        }
        else {
            this.userService.addNewUser(newUser).subscribe((res) => {
                if (res[0].message === "Success.") {
                    messages.push(new ResponseMessage("User successfully added!", ALERT_SUCC));
                    this.msgHelper.setMessages(messages);
                    this.closeTab();
                }
                else {
                    while (messages.length != 0) {
                        messages.pop();
                    }
                    for (let i = 0; i < res.length; i++) {
                        messages.push(new ResponseMessage(res[i].message, ALERT_DANGER));
                    }
                    this.msgHelper.setMessages(messages);
                }
            });
        }
    }

    closeTab() {
        this.tabService.deleteTab(this.tabService.getTabIndex('Add User', 'user-add'))
    }
}