import {Component, OnDestroy, OnInit} from "@angular/core";
import {UserService} from "../shared/user.service";
import { ResponseMessageHelper } from "../shared/response.message.helper";
import { ResponseMessage } from "../shared/response.message";
import {ALERT_DANGER, ALERT_INFO, ALERT_SUCC, ALERT_WARN} from "../shared/constants";
import { UserData } from "../shared/user.data";
import {Subscription} from "rxjs";
import {PagerService} from "../shared/pager.service";
import {PagerCommunicationService} from "../shared/pager.communication.service";
import {PagerData} from "../shared/pager.data";
import {Router} from "@angular/router";
import {FormBuilder, FormGroup} from "@angular/forms";
import {SessionHelper} from "../shared/session.helper";
import {TabManagerService} from "../tabs/tab.manager.service";
import {UserProfileService} from "./user.profile.service";

@Component({
    selector: "user-admin",
    templateUrl: 'app/user-profile/user.admin.component.html'
})
export class UserAdminComponent implements OnInit, OnDestroy {
    private userList : Array<UserData>;
    private savedParams : any = {};
    searchResults : Array<UserData>;
    pageSize : number = 20;
    pageSetSubscription : Subscription;
    serviceWorking: boolean = true;
    searchForm : FormGroup;

    deleteSelect : number;
    resetSelect  : number;

    constructor(private userService : UserService, private msgHelper : ResponseMessageHelper,
                private pagerService: PagerService, private pagerCommunicationService: PagerCommunicationService,
                private router : Router, private formBuilder : FormBuilder, private sessionHelper : SessionHelper,
                private tabService : TabManagerService, private profileService : UserProfileService) {}

    ngOnInit() {
        this.searchResults = [];
        this.pageSetSubscription = this.pagerCommunicationService.pageSetObservable.subscribe(pagerData => this.onNotify(pagerData));
        this.searchUsers();

        this.searchForm = this.formBuilder.group({
            emailAddress : [''],
            activeFlag : [''],
            userName : [''],
            role : ['']
        });

        this.deleteSelect = -1;
        this.resetSelect = -1;
    }

    ngOnDestroy() {
        this.pageSetSubscription.unsubscribe();
    }

    searchUsers(parameters = { }) {
        let messages: Array<ResponseMessage> = [];
        this.msgHelper.clearMessages();
        this.serviceWorking = true;
        this.savedParams = parameters;

        this.userService.searchUsers(parameters).subscribe((res) => {
                if (res.messages[0].message === "Success.") {
                    this.searchResults = res.data as Array<UserData>;

                    let pageNumber = 1;
                    this.userList = this.pagerService.getCurrentPageData(this.searchResults, pageNumber, this.pageSize);

                    let pagerData = new PagerData("userSearchResults", this.searchResults, pageNumber, this.pageSize);
                    this.pagerCommunicationService.fireResetPagerEvent(pagerData);

                    this.serviceWorking = false;
                }
                else {
                    while (messages.length != 0) {
                        messages.pop();
                    }
                    for (let i = 0; i < res.messages.length; i++) {
                        messages.push(new ResponseMessage(res.messages[i].message, ALERT_INFO));
                    }
                    this.msgHelper.setMessages(messages);
                }
            },
            error => {
                this.msgHelper.setMessages(error as Array<ResponseMessage>);
                this.serviceWorking = false;
            });
    }

    parseSearch() {
        let searchParams : any = {};

        if (this.searchForm.value.emailAddress !== ""){
            searchParams.emailAddress = this.searchForm.value.emailAddress;
        }
        if (this.searchForm.value.activeFlag !== "ANY" && this.searchForm.value.activeFlag !== "") {
            searchParams.activeFlag = this.searchForm.value.activeFlag;
        }
        if (this.searchForm.value.role !== "ANY" && this.searchForm.value.role !== "") {
            searchParams.role = this.searchForm.value.role;
        }
        if (this.searchForm.value.userName !== "") {
            searchParams.name = this.searchForm.value.userName;
        }

        this.searchUsers(searchParams);
    }

    /**
     * Sets the page data for the user search pager.
     * @param pagerData the pager data.
     */
    onNotify(pagerData: PagerData) {
        let pageName = pagerData.pagerName;

        if (pageName == "userSearchResults") {
            this.userList = pagerData.data;
        } else {
            // unknown or unhandled pager
        }
    }

    actionDelete(idx : number) {
        this.deleteSelect = idx;
        this.resetSelect  = -1;
    }

    actionReset(idx : number) {
        this.resetSelect = idx;
        this.deleteSelect = -1;
    }

    actionCancel() {
        this.resetSelect  = -1;
        this.deleteSelect = -1;
    }

    actionConfirmDelete(idx : number) {
        let messages: Array<ResponseMessage> = [];

        let jsonObj : any = {};
        let isCurrentUser : boolean = (this.sessionHelper.getUuid() === this.userList[idx].uuid);

        jsonObj.uuid = this.userList[idx].uuid;
        this.msgHelper.clearMessages();

        this.userService.deleteUser(jsonObj).subscribe((res) => {
            if (res[0].message === "Success.") {
                if (isCurrentUser) {
                    this.userService.logout();
                    this.router.navigate(['session-lost'])
                }
                else {
                    this.searchUsers(this.savedParams); //refresh user list
                }
            }
            else {
                while (messages.length != 0) {
                    messages.pop();
                }
                for (let i = 0; i < res.length; i++) {
                    messages.push(new ResponseMessage(res[i].message, ALERT_DANGER));
                }
                this.msgHelper.setMessages(messages);
            }
        });

        this.deleteSelect = -1;
        this.resetSelect  = -1;
    }

    actionConfirmReset(idx : number) {
        let container : any = new FormData();
        let messages: Array<ResponseMessage> = [];

        container.append("emailAddress", this.userList[idx].emailAddress);
        this.userService.sendPasswordResetConfirm(container).subscribe((res) => {
            if (res[0].message === "Success.") {
                messages.push(new ResponseMessage("Success!", ALERT_SUCC));
                this.msgHelper.setMessages(messages);
            }
            else {
                while (messages.length != 0) {
                    messages.pop();
                }
                for (let i = 0; i < res.length; i++) {
                    messages.push(new ResponseMessage(res[i].message, ALERT_DANGER));
                }
                this.msgHelper.setMessages(messages);
            }
        });

        this.deleteSelect = -1;
        this.resetSelect  = -1;
    }

    addUser() {
        this.tabService.addTab('Add User', 'user-add');
    }

    navigateProfile(emailAddress : string) {
        let uuid : string = null;
        let tabName : string = null;
        let messages: Array<ResponseMessage> = [];

        this.userService.searchUsers({'emailAddress' : emailAddress}).subscribe((res) => {
            if (res.messages[0].message === 'Success.') {
                uuid = res.data[0].uuid;
                tabName = res.data[0].firstName + ' ' + res.data[0].lastName;
                let navIdx = this.profileService.addProfile(uuid, tabName);
                this.tabService.addTab(tabName, 'user-profile', navIdx.toString());

            }
            else {
                while (messages.length != 0) {
                    messages.pop();
                }
                for (let i = 0; i < res.messages.length; i++) {
                    messages.push(new ResponseMessage(res.messages[i].message, ALERT_DANGER));
                }
                this.msgHelper.setMessages(messages);
            }
        });
    }
}