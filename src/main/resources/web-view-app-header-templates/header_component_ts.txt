import {Component, OnInit, OnDestroy} from "@angular/core";
import {Router} from "@angular/router";
import {UserService} from "../shared/user.service";
import {ResponseMessageHelper} from "../shared/response.message.helper";
import {ResponseMessage} from "../shared/response.message";
import {ALERT_DANGER} from "../shared/constants";
import {SessionHelper} from "../shared/session.helper";
import {Subscription} from "rxjs";
import {TabManagerService} from "../tabs/tab.manager.service";
import {UserProfileService} from "../user-profile/user.profile.service";

@Component({
    selector: 'header',
    templateUrl: 'app/header/header.component.html'
})
export class HeaderComponent implements OnInit, OnDestroy {
    loggedIn = false;
    loggedInSubscription : Subscription;
    adminUser = false;
    userEmail = "email";

    constructor(private userService: UserService, private router: Router,
                private msgHelper: ResponseMessageHelper, private sessionHelper: SessionHelper,
                private tabService : TabManagerService, private profileService : UserProfileService) {
        this.msgHelper.clearMessages();
    }

    ngOnInit() {
        this.userService.loggedInMonitor.subscribe((status) => this.loggedIn = status);
        this.userService.logout()
            .subscribe((result) => {
                if (result === "Success.") {
                    this.sessionHelper.clearSessionData();
                }
            });
    }

    ngOnDestroy() {
        this.loggedInSubscription.unsubscribe();
    }

    isLoggedIn() : boolean {
        return this.userService.isLoggedIn();
    }

    //function to send user details to service and get the response.
    onSubmit(username:String, password:String) {
        let messages: Array<ResponseMessage> = [];
        this.msgHelper.clearMessages();

        this.userService.login(username, password).subscribe((res) => {
            if (res[0].message === "Success.") {
                this.tabService.addTab('Landing Page', 'welcome');

                this.adminUser = this.sessionHelper.getRole() === "ADMIN";
                this.userEmail = this.sessionHelper.getEmailAddress();
            } else {
                while(messages.length != 0) {
                    messages.pop();
                }
                for(var i=0; i< res.length; i++) {
                    messages.push(new ResponseMessage(res[i].message, ALERT_DANGER));
                }
                this.msgHelper.setMessages(messages);
            }
        });
    }

    logout() {
        this.msgHelper.clearMessages();

        this.userService.logout()
            .subscribe((result) => {
                if (result === "Success.") {
                    this.sessionHelper.clearSessionData();
                    this.router.navigate(['logout']);
                } else {
                    this.msgHelper.setMessages([result]);
                }
            });
    }

    navigateUserProfile() {
        let navIdx = this.profileService.addProfile(this.sessionHelper.getUuid(), 'My Profile');
        this.tabService.addTab('My Profile', 'user-profile', navIdx.toString());
    }
}